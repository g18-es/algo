#include <iostream>

using namespace std;
void mergeSort(int *ptr, int n);
void merge(int *A, int *L, int n1, int *R, int n2);

int main()
{
   int a[10] = {5,6,1,9,9,2,7,20,4,-8};
   int i;
   
 /*for(i=0; i<10; i++)
   {
       cin >> a[i];
   }*/
   mergeSort(&a[0], 10);
   for(i=0; i<10; i++)
   {
       cout << a[i] << " " ;
   }
   return 0;
}

void mergeSort(int *ptr, int n)
{
   int *A = ptr;
   int i,rightSize; 
   
   if (n == 1)
        return;
    
   int left[n/2];
   //fill in array for left half
   for(i=0; i<n/2; i++)
   {
       left[i] = *A;
       A++;
   }
    //cout << endl;
   //A--;
   if(n % 2 == 0)
        rightSize = n/2;
    else
        rightSize = n/2+1;
   int right[rightSize];
   //fill in array for right half
   for(i=0; i<rightSize; A++)
   {
       right[i] = *A;
       cout << right[i] << " ";
       i++;
   }
   cout << endl;
   //recursive calls
   mergeSort(&left[0], n/2);
   mergeSort(&right[0], rightSize);   
   //merge the two halves
   merge(ptr, &left[0], n/2, &right[0], rightSize);    
}

void merge(int *A, int *L, int n1, int *R, int n2)
{
    int i, j;
    i = j = 0;
    while(i< n1+1 && j <n2+1)
    {
        if(*L <= *R &&  i<n1)
        {
            A[i+j] = *L;
            L++;
            i++;
        }
        else if(*L<*R && i >=n1 )
        {
            A[i+j] = *R;
            R++;
            j++;
        }
        else if(*L> *R && j<n2)
        {
            A[i+j] = *R;
            R++;
            j++;
        }
        else
        {
            A[i+j] = *L;
            L++;
            i++;
        }
    
    }
}

